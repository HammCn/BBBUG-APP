<style>
	.uniapp{
		position: fixed;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
	}
	.chatInput {
		position: fixed;
		left: 0;
		bottom: 0;
		right: 0;
		height: 50px;
		background-color: #FFFFFF;
		font-size: 16px;
		padding: 5px 10px; 
		padding-left: 50px;
	}

	.historyList {
		position: fixed;
		left: 0;
		right: 0;
		bottom: 0;
		top: 0;
		background-color: #F5F5F5;
	}
	.item_system{
		text-align: center;
		margin-top: 20px;
		margin-left: 20px;
		margin-right: 20px;
	}
	.item_system_text{
		font-size: 12px;
		color: #aaa;
		text-align: center;
	}
	.item{
		flex-direction: column;
		margin: 10px;
		margin-top: 20px;
		justify-content: flex-start;
		align-items: flex-start;
	}
	.item_mine{
		flex-direction: column;
		margin: 10px;
		margin-top: 20px;
		text-align: right;
		justify-content: flex-end;
		align-items: flex-end;
	}
	.user_head_box{
		flex-direction: row;
	}
	.user_head_image{
		width: 50px;
		height: 50px;
		border-radius: 10px;
		border-color: #FFFFFF;
		border-style: solid;
		border-width: 1px;
	}
	.chat_item_body_left{
		text-align: left;
		justify-content: flex-start;
		padding-left: 60px;
		padding-right: 80px;
		margin-top: -30px;
		flex: 1;
		flex-wrap: wrap;
	}
	.chat_item_body_right{
		text-align: right;
		padding-left: 80px;
		padding-right: 60px;
		margin-top: -30px;
		flex: 1;
		flex-wrap: wrap-reverse;
	}
	.chat_item_user_name{
		font-size: 14px;
		color: #999;
		margin-top: 3px;
		margin-left: 5px;
		margin-right: 5px;
	}
	.chat_item_text{
		margin-top: 10px;
		border-radius: 10px;
		background-color: #FFFFFF;
		color: #333;
		padding: 10px;
		font-size: 16px;
	}
	.chat_item_image_box{
		margin-top: 10px;
		border-radius: 10px;
		padding: 2px;
		background-color: white;
	}
	.chat_item_image_content{
		width: 100%;
		height: 100%;
	}
	.player{
		position: fixed;
		right: 10px;
		top: 10px;
		z-index:100;
		flex-direction: row;
		background-color: rgba(0,0,0,0.6);
		border-radius: 10px;
		padding: 5px;
	}
	.player_image{
		width: 40px;
		height: 40px;
		border-radius: 10px;
	}
	.player_info{
		padding:5px;
		padding-right: 10px;
	}
	.player_song{
		font-size: 14px;
		color:#FFFFFF;
	}
	.player_user{
		font-size: 12px;
		color:#999;
		margin-top: 5px;
	}
	.chatMenu{
	}
	.chatMenu_image{
		position: fixed;
		right: 10px;
		bottom: 10px;
		width: 36px;
		height: 36px;
	}
	.chatMenu_emoji{
		position: fixed;
		left: 10px;
		bottom: 10px;
		width: 32px;
		height: 32px;
	}
	.menuBody{
		flex-direction: row;
	}
	.menuBox {
		z-index: 10;
		position: fixed;
		left: 10px;
		bottom: 0;
		right: 10px;
		background-color: rgba(0,0,0,0.6);
		border-radius: 10px;
		flex-direction: row;
		padding: 10px;
	}
	.menuMain{
		text-align: center;
		justify-content: center;
		align-items: center;
		background-color: #fff;
		color: #666;
		padding: 10px;
		height: 60px;
		width: 60px;
		border-radius: 10px;
	}
	.menuItem{
		margin: 5px;
		text-align: center;
		justify-content: center;
		align-items: center;
	}
	.menuTitle {
		text-align: center;
		font-size: 12px;
		padding: 10px;
		color: #FFFFFF;
	}
	.menuImage{
		width: 24px;
		height: 24px;
	}
	.emoji{
		position: fixed;
		left: 10px;
		right: 10px;
		bottom: 0;
		background-color: rgba(0,0,0,0.6);
		flex-direction: row;
		border-radius: 10px;
		padding: 10px 0px;
		z-index:100;
		flex-wrap:wrap;
		justify-content: center;
		align-items: center;
	}
	.emoji_item{
		width: 40px;
		height: 40px;
		margin: 10px;
	}
</style>
<template>
	<view class="uniapp">
		<block v-if="showRoomPage">
			<scroll-view @click="historyClicked" class="historyList" id="historyList" scroll-y="true" :scroll-with-animation="true"
			 :scroll-into-view="viewId" :style="{bottom:safeAreaBottom+'px',paddingBottom:(safeAreaBottom+60)+'px'}">
				<view id="historyBox">
					<view v-for="(item,index) in historyList">
						<view class="item" :id="'sha_'+item.sha" v-if="item.type=='text' && item.user.user_id!=userInfo.user_id">
							<view class="user_head_box" @click="doUserHeadEvent(item)">
								<image class="user_head_image" :src="item.user.user_head"></image>
								<text class="chat_item_user_name">{{item.user.user_name}}</text>
							</view>
							<view class="chat_item_body_left">
								<view v-if="!item.at" class="chat_item_text_box">
									<text class="chat_item_text" v-if="item.user.user_id==userInfo.user_id && userInfo.user_sex==1" style="background-color: #66CBFF;color:#333;">{{urldecode(item.content)}}</text>
									<text class="chat_item_text" v-if="item.user.user_id==userInfo.user_id && userInfo.user_sex==0" style="background-color: #FE9898;color:white;">{{urldecode(item.content)}}</text>
									<text class="chat_item_text" v-if="item.user.user_id!=userInfo.user_id">{{urldecode(item.content)}}</text>
								</view>
								<view v-if="item.at" class="chat_item_text_box">
									<text class="chat_item_text" v-if="item.at.user_id==userInfo.user_id" style="background-color: #666;color:white;">{{urldecode(item.content)}}</text>
									<text class="chat_item_text" v-if="item.at.user_id!=userInfo.user_id&&item.user.user_id!=userInfo.user_id">{{urldecode(item.content)}}</text>
								</view>
							</view>
						</view>
						<view class="item_mine" :id="'sha_'+item.sha" v-if="item.type=='text' && item.user.user_id==userInfo.user_id">
							<view class="user_head_box">
								<text class="chat_item_user_name">{{item.user.user_name}}</text>
								<image class="user_head_image" :src="item.user.user_head"></image>
							</view>
							<view class="chat_item_body_right">
								<view v-if="!item.at" class="chat_item_text_box">
									<text class="chat_item_text" v-if="item.user.user_id==userInfo.user_id && userInfo.user_sex==1" style="background-color: #66CBFF;color:black;">{{urldecode(item.content)}}</text>
									<text class="chat_item_text" v-if="item.user.user_id==userInfo.user_id && userInfo.user_sex!=1" style="background-color: #FE9898;color:white;">{{urldecode(item.content)}}</text>
								</view>
								<view v-if="item.at" class="chat_item_text_box">
									<text class="chat_item_text" v-if="item.at.user_id==userInfo.user_id" style="background-color: #666;color:white;">{{urldecode(item.content)}}</text>
									<text class="chat_item_text" v-if="item.at.user_id!=userInfo.user_id&&item.user.user_id==userInfo.user_id && userInfo.user_sex==1"
									 style="background-color: #66CBFF;color:black;">{{urldecode(item.content)}}</text>
									<text class="chat_item_text" v-if="item.at.user_id!=userInfo.user_id&&item.user.user_id==userInfo.user_id && userInfo.user_sex!=1"
									 style="background-color: #FE9898;color:white;">{{urldecode(item.content)}}</text>
								</view>
							</view>
						</view>
						<view class="item_mine" v-if="item.type=='img' && item.user.user_id==userInfo.user_id" :id="'sha_'+item.sha">
							<view class="user_head_box">
								<text class="chat_item_user_name">{{item.user.user_name}}</text>
								<image class="user_head_image" :src="item.user.user_head"></image>
							</view>
							<view class="chat_item_body_right">
								<view class="chat_item_image_box">
									<image class="chat_item_image_content" :src="getStaticUrl(urldecode(item.content))" mode="widthFix" @click="fullViewImage(getStaticUrl(urldecode(item.resource)))"></image>
								</view>
							</view>
						</view>
						<view class="item" v-if="item.type=='img' && item.user.user_id!=userInfo.user_id" :id="'sha_'+item.sha">
							<view class="user_head_box" @click="doUserHeadEvent(item)">
								<image class="user_head_image" :src="item.user.user_head"></image>
								<text class="chat_item_user_name">{{item.user.user_name}}</text>
							</view>
							<view class="chat_item_body_left">
								<view class="chat_item_image_box">
									<image class="chat_item_image_content" :src="getStaticUrl(urldecode(item.content))" mode="widthFix" @click="fullViewImage(getStaticUrl(urldecode(item.resource)))"></image>
								</view>
							</view>
						</view>
						<view class="item_system" v-if="item.type=='system'">
							<text class="item_system_text">{{item.content}}</text>
						</view>
					</view>
				</view>
				<view :id="'im_'+historyList.length" class="bottom"></view>
			</scroll-view>
			<view class="emoji" :style="{bottom:(safeAreaBottom+60)+'px'}" blurEffect="light" v-if="showEmojiBox">
				<image class="emoji_item" v-for="index in 30" :src="'../../static/Emojis/'+index+'.png'" @click="sendEmoji(index)"></image>
			</view>
			<input class="chatInput" :style="{bottom:safeAreaBottom+'px'}" type="text" placeholder="全员禁言中,你暂时无法发言" v-if="chatType=='text' && room.room_sendmsg==1"
			 disabled="true" />
			<input disabled="disabled" :style="{bottom:safeAreaBottom+'px'}" v-if="chatType=='voice'" class="chatInput" type="text"
			 placeholder="点击这里开始录音">
			<input class="chatInput" :style="{bottom:safeAreaBottom+'px'}" type="text" confirm-type="send" confirm-hold="true"
			 placeholder="说点什么吧..." v-model="messageObj.message" v-if="chatType=='text' && room.room_sendmsg==0" @keydown="doKeyDown"
			 :focus="messageObj.focus" @confirm="doSendMessage" />
			<image :style="{bottom:(safeAreaBottom+10)+'px'}" @click="doShowMenuBox" class="chatMenu_image" src="/static/image/more.png"
			 mode="widthFix"></image>
			<image :style="{bottom:(safeAreaBottom+10)+'px'}" @click="doShowEmojiBox" class="chatMenu_emoji" src="/static/image/emoji.png"
			 mode="widthFix"></image>

			<view class="player" v-if="song.song" @click="doMusicClicked" blurEffect="dark">
				<view class="player_info">
					<text class="player_song">{{song.song.name}}</text>
					<text class="player_user">点歌人: {{urldecode(song.user.user_name)}}</text>
				</view>
				<image class="player_image" :src="song.song.pic"></image>
			</view>
			<view v-if="showMenuBox" :style="{bottom:(safeAreaBottom+60)+'px'}" blurEffect="light" class="menuBox">
				<scroll-view show-scrollbar="false" scroll-with-animation="true" scroll-x="true" class="menuBody">
					<view class="menuItem" @click="chooseImage">
						<view class="menuMain">
							<image class="menuImage" src="/static/image/icon_photo_fill.png"></image>
						</view>
						<text class="menuTitle">发图</text>
					</view>
					<view class="menuItem" @click="doOpenPage('addSong')">
						<view class="menuMain">
							<image class="menuImage" src="/static/image/icon_dingtab.png"></image>
						</view>
						<text class="menuTitle">点歌</text>
					</view>
					<view class="menuItem" @click="doOpenPage('songList')">
						<view class="menuMain">
							<image class="menuImage" src="/static/image/icon_invite_fill.png"></image>
						</view>
						<text class="menuTitle">已点</text>
					</view>
					<view class="menuItem" @click="doOpenPage('mySong')">
						<view class="menuMain">
							<image class="menuImage" src="/static/image/icon_people_fill.png"></image>
						</view>
						<text class="menuTitle">我的</text>
					</view>
					<view class="menuItem" @click="doOpenPage('onLine')">
						<view class="menuMain">
							<image class="menuImage" src="/static/image/icon_meeting_fill.png"></image>
						</view>
						<text class="menuTitle">在线</text>
					</view>
					<view class="menuItem" @click="doOpenPage('invate')">
						<view class="menuMain">
							<image class="menuImage" src="/static/image/icon_invate.png"></image>
						</view>
						<text class="menuTitle">邀请</text>
					</view>
					<view class="menuItem" @click="doOpenPage('setting')">
						<view class="menuMain">
							<image class="menuImage" src="/static/image/icon_setting.png"></image>
						</view>
						<text class="menuTitle">管理</text>
					</view>
				</scroll-view>
			</view>
		</block>
		<view class="formPassword" v-if="showPasswordForm">
			<form @submit="getRoomInfo">
				<view class="formPasswordTitle">请输入密码进入房间</view>
				<view class="formPasswordInput">
					<input type="number" placeholder="请输入密码" password="true" v-model="password" confirm-type="search" confirm-hold="true" />
				</view>
			</form>
		</view>
	</view>
</template>

<script>
	export default {
		data() {
			return {
				viewId: "",
				safeAreaBottom: 0,
				bgAudioMannager: null,
				showEmojiBox: false,
				showRoomPage: false,
				showMenuBox: false,
				showPasswordForm: false,
				app: getApp(),
				userInfo: null,
				song: {
					song: null,
					user: null,
				},
				room_id: 0,
				room: false,
				password: "",
				chatType: 'text',
				historyList: [],
				messageObj: {
					message: "",
					at: false,
					focus: false,
				},
				musicNotLike: false
			}
		},
		onLoad() {
			let that = this;
			const res = uni.getSystemInfoSync();
			that.safeAreaBottom = res.safeAreaInsets.bottom == 0 ? 0 : res.safeAreaInsets.bottom;
			that.bgAudioMannager = uni.getBackgroundAudioManager();
			this.room_id = uni.getStorageSync('room_id') || 10000;
			that.app.user.getMyInfo({
				success(userInfo) {
					that.userInfo = userInfo;
					that.getRoomInfo();
				}
			});
			uni.$on('WebSocketMessage', function(data) {
				try {
					that.messageController(JSON.parse(data));
					that.autoScroll();
				} catch (error) {
					console.error(error);
				}
			});
			uni.$on('IndexReload', function() {
				that.app.user.getMyInfo({
					success(userInfo) {
						that.userInfo = userInfo;
						that.getRoomInfo();
					}
				});
			});
			uni.$on('AtUserEvent', function(user) {
				that.doAtUser(user);
			});
			uni.$on('RoomChanged', function(room_id) {
				console.log(room_id);
				uni.setNavigationBarTitle({
					title: '正在进入'
				});
				that.room_id = room_id;
				that.showPasswordForm = false;
				that.showRoomPage = false;
				that.password = '';
				uni.setStorageSync('room_id', parseInt(that.room_id));
				that.getRoomInfo();
			});
			that.bgAudioMannager.onCanplay(function() {
				let time = parseInt(new Date().valueOf() / 1000) - that.song.since - 3;
				that.bgAudioMannager.seek(time > 0 ? time : 0);
			});
			that.bgAudioMannager.onEnded(function() {
				that.song = {
					song: null,
					user: null
				};
			});
		},
		onShow() {
			let that = this;
			if (that.bgAudioMannager.src) {
				if (!that.musicNotLike) {
					that.bgAudioMannager.play();
				}
			}
			that.password = '';
			that.autoScroll();
		},
		onNavigationBarButtonTap(res) {
			let that = this;
			switch (res.text) {
				case '换房':
					uni.navigateTo({
						url: "../room/select"
					});
					break;
				case '我的':
					if (that.userInfo && that.userInfo.user_id <= 0) {
						that.app.user.login();
					} else {
						uni.navigateTo({
							url: '../user/index',
						});
					}
					break;
				default:
			}
		},
		methods: {
			doUserHeadEvent: function(e) {
				var that = this
				that.showMenuUserHead(e);
			},
			doShowEmojiBox() {
				let that = this;
				that.showEmojiBox = !that.showEmojiBox;
				that.showMenuBox = false;
				uni.hideKeyboard();
				if (!that.showEmojiBox) {
					that.autoScroll();
				}
			},
			doShowMenuBox() {
				let that = this;
				that.showMenuBox = !that.showMenuBox;
				that.showEmojiBox = false;
				uni.hideKeyboard();
				if (!that.showMenuBox) {
					that.autoScroll();
				}
			},
			doKeyDown() {
				let that = this;
				if (that.messageObj.at) {
					if (that.messageObj.message.indexOf('@' + decodeURIComponent(that.messageObj.at.user_name)) < 0) {
						//@的昵称已经被改过了
						that.messageObj.at = false;
					}
				}
			},
			doMusicClicked() {
				let that = this;
				let menu = [
					'不喜欢', '收藏'
				];
				if (that.userInfo.user_admin || that.room.room_user == that.userInfo.user_id) {
					menu = [
						'切歌', '收藏', '禁止Ta点歌'
					];
				}
				uni.showActionSheet({
					itemList: menu,
					success: function(res) {
						console.log(res.tapIndex);
						let buttonName = menu[res.tapIndex];
						switch (buttonName) {
							case '禁止Ta点歌':
								that.app.request({
									url: 'user/songdown',
									data: {
										room_id: that.room_id,
										user_id: that.song.user.user_id
									},
									loading: "禁歌中",
									success: function(res) {
										uni.showModal({
											title: '禁歌成功',
											content: res.msg,
											showCancel: false,
											success: function() {}
										});
									}
								});
								break;
							case '切歌':
								uni.showModal({
									title: '切歌提醒',
									content: '是否确认切掉当前播放的歌?',
									cancelText: '取消',
									confirmColor: '#FF4500',
									confirmText: '切歌',
									success: function(res) {
										if (res.confirm) {
											that.app.request({
												url: "song/pass",
												data: {
													room_id: that.room_id,
													mid: that.song.song.mid
												},
												success: function() {}
											});
										}
									}
								});
								break;
							case '不喜欢':
								that.app.request({
									url: "song/pass",
									data: {
										room_id: that.room_id,
										mid: that.song.song.mid
									},
									success: function(res) {
										that.bgAudioMannager.pause();
										that.song = {
											song: null,
											user: null
										};
										that.musicNotLike = true;
										uni.showModal({
											title: '不喜欢',
											content: res.msg,
											showCancel: false,
											success: function() {}
										});
									}
								});
								break;
							case '收藏':
								that.app.request({
									url: "song/addMySong",
									data: {
										room_id: that.room_id,
										mid: that.song.song.mid
									},
									success: function(res) {
										uni.showToast({
											title: "收藏成功"
										});
									}
								});
								break;
							default:
						}
					}
				})
			},
			doAtUser(user) {
				let that = this;
				that.messageObj.at = user;
				that.messageObj.message = "@" + decodeURIComponent(user.user_name) + " " + that.messageObj.message;
				that.messageObj.focus = true;
			},
			autoScroll() {
				let that = this;
				this.viewIndex = "";
				//设置viewIndex值，使聊天滚动到底部  
				this.$nextTick(() => {
					this.viewId = "im_" + this.historyList.length;
				});
			},
			historyClicked() {
				let that = this;
				that.showMenuBox = false;
				that.showEmojiBox = false;
				uni.hideKeyboard();
				that.autoScroll();
			},
			messageController(msg) {
				let that = this;
				switch (msg.type) {
					case 'text':
					case 'img':
					case 'system':
						if (msg.type == 'text' && msg.at) {
							msg.content = "@" + decodeURIComponent(msg.at.user_name) + " " + msg.content;
						}
						that.addMessageToList(msg);
						break;
					case 'addSong':
						if (msg.at) {
							that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 送了一首 《" + msg.song.name + "》 给 " +
								decodeURIComponent(msg.at.user_name), '#333');
						} else {
							that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 点了一首《" + msg.song.name + "》", '#333');
						}

						break;
					case 'pass':
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 切掉了《" + msg.song.name + "》", '#ff4500');

						break;
					case 'chat_bg':
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 运气大爆发,触发了点歌背景墙特效(1小时内播放歌曲时有效)!", 'green', '#eee');

						break;
					case 'push':
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 将歌曲 《" + msg.song.name + "》 设为置顶候播放");

						break;
					case 'removeSong':
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 将歌曲 《" + msg.song.name + "》 从队列移除");

						break;
					case 'removeban':
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 将 " + decodeURIComponent(msg.ban.user_name) +
							" 解禁");

						break;
					case 'shutdown':
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 禁止了用户 " + decodeURIComponent(msg.ban.user_name) +
							" 发言");

						break;
					case 'songdown':
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 禁止了用户 " + decodeURIComponent(msg.ban.user_name) +
							" 点歌");

						break;
					case 'back':
						for (let i = 0; i < that.historyList.length; i++) {
							if (that.historyList[i].key == msg.key) {
								that.historyList.splice(i, 1);
								break;
							}
						}
						that.addSystemMessage(decodeURIComponent(msg.user.user_name) + " 撤回了一条消息");

						break;
					case 'playSong':
						that.musicNotLike = false;
						that.playMusic(msg);
						break;
					default:
				}
			},
			playMusic(msg) {
				let that = this;
				if (that.song.song && that.song.song.mid == msg.song.mid) {
					return;
				}
				that.song = msg;
				that.bgAudioMannager.title = msg.song.name + " - " + msg.song.singer;
				that.bgAudioMannager.singer = "点歌人:" + decodeURIComponent(msg.user.user_name) + ' (' + that.room.room_name + ')';
				that.bgAudioMannager.coverImgUrl = msg.song.pic;
				that.bgAudioMannager.src = "https://api.bbbug.com/api/song/playurl?mid=" + msg.song.mid;
				that.bgAudioMannager.play();
			},
			sendEmoji(index) {
				let that = this;
				let url = "https://cdn.bbbug.com/images/emoji/" + index + ".png";
				that.app.request({
					url: "message/send",
					data: {
						where: 'channel',
						to: that.room_id,
						type: 'img',
						msg: url,
						resource: url,
					},
					success(res) {
						that.showEmojiBox = false;
					}
				});
			},
			doSendMessage(e) {
				let that = this;
				let message_old = that.messageObj.message;
				let message = message_old;
				that.messageObj.message = '';
				if (message_old) {
					if (that.messageObj.at) {
						message = message_old.replace("@" + decodeURIComponent(that.messageObj.at.user_name),
							'');
					}
					that.app.request({
						url: "message/send",
						data: {
							type: 'text',
							where: "channel",
							to: that.room_id,
							msg: encodeURIComponent(message),
							at: that.messageObj.at
						},
						success: function(res) {
							that.messageObj.at = false;
						},
						error: function(res) {
							that.messageObj.message = message_old;
							uni.showModal({
								title: '发送失败',
								content: res.msg,
								showCancel: false
							});
						}
					});
				}
			},
			randomString(len) {
				len = len || 32;
				var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'; /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/
				var maxPos = $chars.length;
				var pwd = '';
				for (i = 0; i < len; i++) {
					pwd += $chars.charAt(Math.floor(Math.random() * maxPos));
				}
				return pwd;
			},
			addMessageToList(msg) {
				let that = this;
				if (that.historyList.length > 100) {
					that.historyList.shift();
				}
				that.historyList.push(msg);

				that.autoScroll();
			},
			urldecode(str) {
				return decodeURIComponent(str);
			},
			connectWebsocket() {
				let that = this;
				if (that.app.webSocket.isConnected) {
					console.log("需要斷開")
					that.app.webSocket.closeWss();
					setTimeout(function() {
						that.connectWebsocket();
					}, 1000);
					return;
				}
				that.app.webSocket.connectWss();
				uni.hideLoading();
				that.addSystemMessage(that.room.room_notice || '服务器连接成功');
				that.showPasswordForm = false;
				that.showRoomPage = true;
				that.app.request({
					url: 'message/getMessageList',
					data: {
						room_id: that.room_id,
						per_page: 100,
					},
					success: function(res) {
						that.historyList = [];
						for (let i = 0; i < res.data.length; i++) {
							let _obj = false;
							try {
								_obj = JSON.parse(decodeURIComponent(res.data[i].message_content));
							} catch (error) {}
							if (!_obj) {
								continue;
							}
							if (_obj.type == "text") {
								if (_obj.at) {
									_obj.content = '@' + _obj.at.user_name + " " + _obj.content;
								}
							}
							_obj.time = res.data[i].message_createtime;
							that.historyList.unshift(_obj);
						}
						that.addSystemMessage(that.room.room_notice || "欢迎来到" + that.room.room_name);
						that.autoScroll();
					},

					error: function(res) {
						console.log(res);
					}
				});

			},
			getRoomInfo() {
				let that = this;
				uni.showLoading({
					title: '连接房间服务器'
				});
				that.app.request({
					url: 'room/getRoomInfo',
					data: {
						room_id: that.room_id,
						room_password: that.password
					},
					success(res) {
						that.room = res.data;
						uni.setNavigationBarTitle({
							title: that.room.room_name
						});
						that.app.request({
							url: 'room/getWebsocketUrl',
							data: {
								channel: that.room_id
							},
							success: function(res) {
								that.app.webSocket.config.wssUrl = 'wss://websocket.bbbug.com/?account=' +
									res.data.account + '&channel=' +
									res.data.channel + '&ticket=' + res.data.ticket;
								that.connectWebsocket();
							},

							error: function(res) {
								console.log(res);
							}
						});
					},
					error(res) {
						uni.hideLoading();
						if (res.code == 403) {
							uni.setNavigationBarTitle({
								title: '密码房'
							});
							that.showPasswordForm = true;
							that.showRoomPage = false;
							if (that.password) {
								uni.showModal({
									showCancel: false,
									title: '进入失败',
									content: res.msg,
									success: function() {}
								});
							}
						} else {
							uni.showModal({
								showCancel: false,
								title: '进入失败',
								content: res.msg,
								success: function() {
									uni.navigateBack();
								}
							});
						}
					}
				});
			},
			addSystemMessage(msg, color = '#999', bg = 'tansparent') {
				let that = this;
				that.historyList.push({
					type: "system",
					content: msg,
					bg: bg,
					color: color
				});
				that.autoScroll();
			},
			doOpenPage(page) {
				let that = this;
				switch (page) {
					case 'addSong':
						uni.navigateTo({
							url: '../song/search?room_id=' + that.room_id
						});
						break;
					case 'mySong':
						uni.navigateTo({
							url: '../song/my?room_id=' + that.room_id
						});
						break;
					case 'songList':
						uni.navigateTo({
							url: '../song/list?room_id=' + that.room_id
						});
						break;
					case 'onLine':
						let isMaster = 0;
						if (that.userInfo.user_admin || that.room.room_user == that.userInfo.user_id) {
							isMaster = 1;
						}
						uni.navigateTo({
							url: '../room/online?room_id=' + that.room_id + "&room_admin=" + isMaster
						});
						break;
					default:
				}
			},
			showMenuUserHead(msg) {
				let user = msg.user;
				let that = this;
				let menu = ['进入主页', '@一下Ta', '送歌给Ta'];
				if (that.userInfo.user_admin || that.room.room_user == that.userInfo.user_id) {
					menu = ['进入主页', '@一下Ta', '送歌给Ta', '撤回消息', '禁止点歌', '禁止发言', '全部解禁'];
				} else if (user.user_id == that.userInfo.user_id) {
					//发消息人是自己
					menu = ['进入主页', '@一下Ta', '送歌给Ta', '撤回消息'];
				} else {
					//其他人的消息
				}
				uni.showActionSheet({
					itemList: menu,
					success: function(res) {
						switch (menu[res.tapIndex]) {
							case '送歌给Ta':
								uni.navigateTo({
									url: '../song/search?room_id=' + that.room_id + "&at=" + user.user_id + "&name=" + user.user_name
								});
								break;
							case '@一下Ta':
								that.doAtUser(user);
								break;
							case '全部解禁':
								that.app.request({
									url: 'user/removeban',
									data: {
										room_id: that.room_id,
										user_id: user.user_id
									},
									loading: "解禁中",
									success: function(res) {
										uni.showModal({
											title: '解禁成功',
											content: res.msg,
											showCancel: false,
											success: function() {}
										});
									}
								});
								break;
							case '禁止发言':
								that.app.request({
									url: 'user/shutdown',
									data: {
										room_id: that.room_id,
										user_id: user.user_id
									},
									loading: "禁言中",
									success: function(res) {
										uni.showModal({
											title: '禁言成功',
											content: res.msg,
											showCancel: false,
											success: function() {}
										});
									}
								});
								break;
							case '禁止点歌':
								that.app.request({
									url: 'user/songdown',
									data: {
										room_id: that.room_id,
										user_id: user.user_id
									},
									loading: "禁歌中",
									success: function(res) {
										uni.showModal({
											title: '禁歌成功',
											content: res.msg,
											showCancel: false,
											success: function() {}
										});
									}
								});
								break;
							default:
								uni.showModal({
									title: "BBBUG",
									content: menu[res.tapIndex] + "即将上线",
									showCancel: false
								});
						}
					}
				});
			},
			getStaticUrl(url) {
				if (url.indexOf('https://') > -1 || url.indexOf('http://') > -1) {
					return url;
				} else {
					return 'https://cdn.bbbug.com/uploads/' + url;
				}
			},
			doTouch(user) {
				let that = this;
				that.request({
					url: "message/touch",
					data: {
						at: user.user_id,
						room_id: that.room_id
					},
					success(res) {}
				});
			},
			chooseImage() {
				let that = this;
				uni.chooseImage({
					sizeType: "compressed",
					sourceType: ['album'],
					count: 1,
					fail: function(res) {
						console.log(res);
					},
					success: function(res) {
						uni.showLoading({
							title: '处理中'
						});
						uni.compressImage({
							src: res.tempFilePaths[0],
							quality: 50,
							success: function(res) {
								uni.uploadFile({
									url: that.app.globalData.request.apiUrl + "attach/uploadimage",
									filePath: res.tempFilePath,
									name: 'file',
									formData: that.app.globalData.request.baseData,
									success: function(uploadFileRes) {
										uni.hideLoading();
										let response = {};
										try {
											response = JSON.parse(uploadFileRes.data);
										} catch (err) {
											uni.showModal({
												showCancel: false,
												title: '上传失败',
												content: '服务器发生错误',
												success: function() {}
											});
										}
										if (response.code == 200) {
											that.app.request({
												url: "message/send",
												data: {
													where: 'channel',
													to: that.room_id,
													type: 'img',
													msg: response.data.attach_thumb,
													resource: response.data.attach_path,
												},
												success: function(res) {},
												error: function(res) {
													that.messageObj.message = message_old;
													uni.showModal({
														title: '发送失败',
														content: res.msg,
														showCancel: false
													});
												}
											});
										} else {
											uni.showModal({
												showCancel: false,
												title: '上传失败',
												content: response.msg,
												success: function() {}
											});
										}
									}
								});
							}
						})
					}
				});
			},
			fullViewImage(url) {
				uni.previewImage({
					urls: [url],
					longPressActions: {
						itemList: ['保存图片', '举报图片'],
						success: function(data) {},
						fail: function(err) {}
					}
				});
			}
		}
	}
</script>
